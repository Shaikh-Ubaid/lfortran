name: Check Third Party Code Compilation

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  MACOSX_DEPLOYMENT_TARGET: 14.0

jobs:
  third_party_code_compile:
    name: Check Third Party Code Compilation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "ubuntu-latest"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1.8.0
        with:
          environment-file: ci/environment.yml
          create-args: >-
            python=${{ matrix.python-version }}
            bison=3.4
            openblas=0.3.21
            llvm-openmp=14.0.4
            cmake=3.26.4
            make=4.3

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Build MacOS
        shell: bash -e -l {0}
        if: contains(matrix.os, 'macos')
        run: |
            ./build0.sh
            ./build1.sh

      - name: Test Legacy Minpack (SciPy)
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/certik/minpack.git
            cd minpack
            git checkout -t origin/scipy30
            git checkout 409ba02a107f47ee835f3976952bbc64dd46de8a
            mkdir lf
            cd lf
            FC="$(pwd)/../../src/bin/lfortran --intrinsic-mangling" cmake ..
            make
            examples/example_hybrd
            examples/example_hybrd1
            examples/example_lmder1
            examples/example_lmdif1
            examples/example_primes
            ctest

      - name: Test Modern Minpack (Fortran-Lang)
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/fortran-lang/minpack modern_minpack_01
            cd modern_minpack_01
            git checkout c0b5aea9fcd2b83865af921a7a7e881904f8d3c2
            $(pwd)/../src/bin/lfortran ./src/minpack.f90 -c --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd.f90 --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd1.f90 --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_lmdif1.f90 --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_lmder1.f90 --legacy-array-sections

      - name: Test Modern Minpack (check results)
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/Pranavchiku/modern_minpack.git modern_minpack_02
            cd modern_minpack_02
            git checkout -t origin/w5
            git checkout fcde66ca86348eb0c4012dbdf0f4d8dba61261d8
            $(pwd)/../src/bin/lfortran ./src/minpack.f90 -c --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd.f90 --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd1.f90 --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_lmdif1.f90 --legacy-array-sections
            $(pwd)/../src/bin/lfortran ./examples/example_lmder1.f90 --legacy-array-sections

            # $(pwd)/../src/bin/lfortran --fast ./examples/example_hybrd.f90 --legacy-array-sections
            # $(pwd)/../src/bin/lfortran --fast ./examples/example_hybrd1.f90 --legacy-array-sections
            # $(pwd)/../src/bin/lfortran --fast ./examples/example_lmdif1.f90 --legacy-array-sections
            # $(pwd)/../src/bin/lfortran --fast ./examples/example_lmder1.f90 --legacy-array-sections

      - name: Test dftatom
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/czgdp1807/dftatom.git
            cd dftatom
            git checkout -t origin/lf40
            git checkout 6e0f6e7506440b042aae93e57b10444ee6c36f7a
            export PATH="$(pwd)/../src/bin:$PATH"
            make -f Makefile.manual
            make -f Makefile.manual test
            git clean -dfx
            make -f Makefile.manual F90="lfortran --skip-pass=inline_function_calls,fma --fast"
            make -f Makefile.manual test

      - name: Test fastGPT ( ubuntu-latest )
        shell: bash -e -x -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            git clone https://github.com/certik/fastGPT.git
            cd fastGPT
            git checkout -t origin/lf6
            git checkout bc04dbf476b6173b0bb945ff920119ffaf4a290d
            echo $CONDA_PREFIX
            FC=$(pwd)/../src/bin/lfortran CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS .
            make
            ls -l ./gpt2 ./chat ./test_basic_input ./test_chat ./test_more_inputs
            file ./gpt2 ./chat ./test_basic_input ./test_chat ./test_more_inputs
            ldd ./gpt2
            ldd ./chat
            ldd ./test_basic_input
            ldd ./test_chat
            ldd ./test_more_inputs

            git clean -dfx
            git checkout -t origin/lf36run
            git checkout c915a244354df2e23b0dc613e302893b496549e2
            curl -o model.dat -L https://huggingface.co/datasets/certik/fastGPT/resolve/main/model_fastgpt_124M_v1.dat

            mkdir lf
            cd lf
            FC=$(pwd)/../../src/bin/lfortran CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS -DCMAKE_BUILD_TYPE=Debug ..
            make VERBOSE=1
            ln -s ../model.dat .
            ./gpt2
            ./test_more_inputs
            ./test_chat
            ctest -V
            cd ..

            mkdir lf-fast
            cd lf-fast
            FC="$(pwd)/../../src/bin/lfortran --fast" CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS -DCMAKE_BUILD_TYPE=Release ..
            make VERBOSE=1
            ln -s ../model.dat .
            ./gpt2
            ./test_more_inputs
            ./test_chat
            ctest -V
            cd ..

            git clean -dfx
            git checkout -t origin/namelist
            git checkout d3eef520c1be8e2db98a3c2189740af1ae7c3e06
            curl -o model.dat -L https://huggingface.co/datasets/certik/fastGPT/resolve/main/model_fastgpt_124M_v1.dat

            mkdir lf
            cd lf
            FC=$(pwd)/../../src/bin/lfortran CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS -DCMAKE_BUILD_TYPE=Debug ..
            make VERBOSE=1
            ln -s ../model.dat .
            ./gpt2
            ./test_basic_input
            ./test_more_inputs
            cd ..

            mkdir lf-fast
            cd lf-fast
            FC="$(pwd)/../../src/bin/lfortran --fast" CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS -DCMAKE_BUILD_TYPE=Release ..
            make VERBOSE=1
            ln -s ../model.dat .
            ./gpt2
            ./test_basic_input
            ./test_more_inputs
            cd ..

            rm -rf fastGPT/

      - name: Test fastGPT ( macos-latest )
        shell: bash -e -x -l {0}
        if: contains(matrix.os, 'macos')
        run: |
            git clone https://github.com/certik/fastGPT.git
            cd fastGPT

            git clean -dfx
            git checkout -t origin/namelist
            git checkout d3eef520c1be8e2db98a3c2189740af1ae7c3e06
            curl -o model.dat -L https://huggingface.co/datasets/certik/fastGPT/resolve/main/model_fastgpt_124M_v1.dat

            mkdir lf
            cd lf
            FC=$(pwd)/../../src/bin/lfortran CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS -DCMAKE_BUILD_TYPE=Debug ..
            make VERBOSE=1
            ln -s ../model.dat .
            ./gpt2
            ./test_basic_input
            ./test_more_inputs
            cd ..


      - name: Test fpm
        shell: bash -e -x -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            git clone https://github.com/certik/fpm.git
            cd fpm
            git checkout lfortran_build_1
            git checkout ab02e3a57bc286c6e75b23098c209db8c27157ea
            export PATH="$(pwd)/../src/bin:$PATH"
            ./build.sh

      - name: Test stdlib
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/czgdp1807/stdlib.git
            cd stdlib
            export PATH="$(pwd)/../src/bin:$PATH"

            git checkout lf20
            git checkout abb1d33d6ae02d8b62a13be7f9e51f6117c67ba4
            micromamba install -c conda-forge fypp gfortran
            git clean -fdx
            FC=lfortran cmake . -DTEST_DRIVE_BUILD_TESTING=OFF -DBUILD_EXAMPLE=ON -DCMAKE_Fortran_COMPILER_WORKS=TRUE -DCMAKE_Fortran_FLAGS="--cpp --realloc-lhs"
            make -j8
            ctest
            ./build_test_gf.sh

      - name: Test SNAP
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/certik/SNAP.git
            cd SNAP
            export PATH="$(pwd)/../src/bin:$PATH"

            git checkout lf7
            git checkout 4da1d34db8561e580ea87d6e84e5ecd30efc1572
            cd ./src
            make -j8 FORTRAN=lfortran FFLAGS= MPI=no OPENMP=no
            ./gsnap ../qasnap/sample/inp out

            make clean
            make -j8 FORTRAN=lfortran FFLAGS="--fast --skip-pass=promote_allocatable_to_nonallocatable" MPI=no OPENMP=no
            ./gsnap ../qasnap/sample/inp out
